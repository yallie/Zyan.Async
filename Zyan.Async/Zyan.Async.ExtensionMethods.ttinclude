<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Threading.Tasks" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
<#

	// ignore lists for assemblies and interface methods
	var asmIgnoreList = "^(mscorlib|Microsoft|System|WindowsBase|EnvDTE|Accessibility)";
	var methodIgnoreList = "^(get_|set_|add_|remove)";

	// get loaded assemblies containing interfaces
	var asms =
		from asm in AppDomain.CurrentDomain.GetAssemblies()
		where !Regex.IsMatch(asm.GetName().Name, asmIgnoreList) && asm.GetTypes().Any(t => t.IsInterface)
		orderby asm.FullName
		select asm;

	// process every assembly containing interfaces
	foreach (var asm in asms)
	{
		#>// Assembly name: <#= asm.FullName #>
<#
		// emit extension class for each interface
		foreach (var type in asm.GetTypes())
		{
#>namespace <#= type.Namespace #>.Client
{
	/// <summary>
	/// Asynchronous extension methods for the <see cref="<#= type.Name #>" /> interface.
	/// </summary>
	public static class <#= type.Name #>AsyncExtensions
	{
<#
			// create asynchronous extension method for every synchronous method
			foreach (var method in type.GetMethods().Where(m => !Regex.IsMatch(m.Name, methodIgnoreList)))
			{
				var returnType = method.ReturnType;
				if (returnType == typeof(void) || returnType == typeof(Task))
				{
					returnType = typeof(Task);
				}
				else
				{
					returnType = typeof(Task<>).MakeGenericType(returnType);
				}

				var genericParameters = string.Empty;
				if (method.IsGenericMethod)
				{
					genericParameters = "<" + string.Join(", ", method.GetGenericArguments().Select(t => GetTypeName(t))) + ">";
				}

				var parameters = string.Join(", ", method.GetParameters().Select(p =>
				{
					return (Attribute.IsDefined(p, typeof(ParamArrayAttribute)) ? "params " : string.Empty) +
						GetTypeName(p.ParameterType) + " " + p.Name;
				}));

				if (!string.IsNullOrEmpty(parameters))
				{
					parameters = ", " + parameters; 
				}
				
				var actualParameters = string.Join(", ", method.GetParameters().Select(p => p.Name));

#>		// <#= method #>
		public static <#= GetTypeName(returnType) #> <#= method.Name #>Async<#= genericParameters #>(this <#= type.Name #> self<#= parameters#>)
		{
			return System.Threading.Tasks.Task.Run(() => self.<#= method.Name #><#= genericParameters #>(<#= actualParameters #>));
		}

<#
			}
#>	}
} // <#= type.Namespace #>.Client.<#= type.Name #>AsyncExtensions

<#
		}
	}
#>
<#+
	private string GetTypeName(Type type)
	{
		if (!type.IsGenericType)
		{
			return type.FullName ?? type.Name;
		}

        var typeArguments = string.Join(", ", type.GetGenericArguments().Select(x => GetTypeName(x)));
        return Regex.Replace(type.GetGenericTypeDefinition().FullName, @"`.+$", "") + "<" + typeArguments + ">";
	}
#>