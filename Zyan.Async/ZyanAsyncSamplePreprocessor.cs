// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Zyan.Async
{
    using System;
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading.Tasks;
    using System.Reflection;
    using System.Collections.Generic;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Externals\Zyan.Async\Zyan.Async\ZyanAsyncSamplePreprocessor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class ZyanAsyncSamplePreprocessor : ZyanAsyncSamplePreprocessorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

// Extension method generator.
//
// Inspects all loaded assemblies, extracts interface types.
// For every interface creates static class with asynchronous extension methods.

            
            #line default
            #line hidden
            this.Write("// Rewriting XML comments is not supported\r\n#pragma warning disable 1591\r\n\r\n");
            
            #line 20 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

	// ignore lists
	var asmIgnoreList = "^(mscorlib|Microsoft|System|WindowsBase|EnvDTE|Accessibility|UltimaLib|Zyan.Communication)";
	var typeIgnoreList = "^(Microsoft.VisualStudio.TextTemplating)";
	var methodIgnoreList = "^(get_|set_|add_|remove)";

	Func<Type, bool> typeFilter = t =>
		t.IsInterface && 
		!t.IsGenericType && 
		!Regex.IsMatch(t.Name, typeIgnoreList) &&
		!System.Attribute.IsDefined(t, typeof(System.Runtime.CompilerServices.CompilerGeneratedAttribute)) &&
		t.GetMethods().Any(m => !Regex.IsMatch(m.Name, methodIgnoreList));

	// get loaded assemblies containing interfaces
	var asms =
		from asm in AppDomain.CurrentDomain.GetAssemblies()
		where !Regex.IsMatch(asm.GetName().Name, asmIgnoreList) && GetTypes(asm).Any(typeFilter)
		orderby asm.FullName
		select asm;

	// process every assembly containing interfaces
	foreach (var asm in asms)
	{
		
            
            #line default
            #line hidden
            this.Write("// Assembly name: ");
            
            #line 43 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(asm.FullName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 44 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

		// emit extension class for each interface
		foreach (var type in GetTypes(asm).Where(typeFilter))
		{

            
            #line default
            #line hidden
            this.Write("namespace ");
            
            #line 48 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetClientNamespace(type)));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t/// <summary>\r\n\t/// Asynchronous extension methods for the <see cref=\"");
            
            #line 51 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write("\" /> interface.\r\n\t/// </summary>\r\n\tpublic static class ");
            
            #line 53 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            
            #line default
            #line hidden
            this.Write("AsyncExtensions\r\n\t{\r\n");
            
            #line 55 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

			// create asynchronous extension method for every synchronous method
			foreach (var method in type.GetMethods().Where(m => !Regex.IsMatch(m.Name, methodIgnoreList)))
			{
				var methodParameters = method.GetParameters();
				if (methodParameters.Any(p => p.IsOut || p.IsRetval || p.ParameterType.IsPointer || p.ParameterType.IsByRef))
				{
					// methods with ref/out parameters cannot be async
					continue;
				}

				var returnType = method.ReturnType;
				if (returnType == typeof(void) || returnType == typeof(Task))
				{
					returnType = typeof(Task);
				}
				else
				{
					returnType = typeof(Task<>).MakeGenericType(returnType);
				}

				var genericParameters = string.Empty;
				var genericConstraints = Enumerable.Empty<string>();
				if (method.IsGenericMethod)
				{
					genericParameters = "<" + string.Join(", ", method.GetGenericArguments().Select(t => GetTypeName(t))) + ">";
					genericConstraints = method.GetGenericArguments().Select(t => GetTypeConstraints(t)).Where(c => c != null);
				}

				var parameters = string.Join(", ", method.GetParameters().Select(p =>
				{
					return (Attribute.IsDefined(p, typeof(ParamArrayAttribute)) ? "params " : string.Empty) +
						GetTypeName(p.ParameterType) + " " + p.Name;
				}));

				if (!string.IsNullOrEmpty(parameters))
				{
					parameters = ", " + parameters; 
				}
				
				var actualParameters = string.Join(", ", method.GetParameters().Select(p => p.Name));


            
            #line default
            #line hidden
            this.Write("\t\t// ");
            
            #line 97 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(method));
            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic static ");
            
            #line 98 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeName(returnType)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 98 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("Async");
            
            #line 98 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters));
            
            #line default
            #line hidden
            this.Write("(this ");
            
            #line 98 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write(" self");
            
            #line 98 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameters));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 99 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
 
			// emit generic constraints
			foreach (var constraint in genericConstraints)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 103 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(constraint));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 104 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

			}

            
            #line default
            #line hidden
            this.Write("\t\t{\r\n\t\t\treturn System.Threading.Tasks.Task.Run(() => self.");
            
            #line 108 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            
            #line 108 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 108 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(actualParameters));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t}\r\n\r\n");
            
            #line 111 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

			}

            
            #line default
            #line hidden
            this.Write("\t}\r\n} // ");
            
            #line 114 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetClientNamespace(type)));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 114 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.Name));
            
            #line default
            #line hidden
            this.Write("AsyncExtensions\r\n\r\n");
            
            #line 116 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

		}
	}

            
            #line default
            #line hidden
            
            #line 1 "D:\Externals\Zyan.Async\Zyan.Async\ZyanAsyncSamplePreprocessor.tt"


/// --------------------------------------
/// Add your assemblies here: 
/// -------------------------------------
            
            #line default
            #line hidden
            this.Write("\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 120 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

	internal string GetTypeName(Type type)
	{
		if (type.IsGenericType)
		{
	        var typeArguments = string.Join(", ", type.GetGenericArguments().Select(x => GetTypeName(x)));
    	    return Regex.Replace(type.GetGenericTypeDefinition().FullName, @"`.+$", "") + "<" + typeArguments + ">";
		}

		if (type.IsArray)
		{
			var rank = new string(',', type.GetArrayRank() - 1);
			return GetTypeName(type.GetElementType()) + "[" + rank + "]";
		}

		return (type.FullName ?? type.Name).Replace("+", ".");
	}

	private string GetTypeConstraints(Type type)
	{
		var constraints = type
			.GetGenericParameterConstraints()
			.Where(t => t != typeof(ValueType))
			.Select(t => t.Name)
			.ToList();

		var attrs = type.GenericParameterAttributes;
		if ((attrs & GenericParameterAttributes.ReferenceTypeConstraint) != 0)
		{
			constraints.Insert(0, "class");
		}

		if ((attrs & GenericParameterAttributes.NotNullableValueTypeConstraint) != 0)
		{
			constraints.Insert(0, "struct");
		}

		if ((attrs & GenericParameterAttributes.DefaultConstructorConstraint) != 0 &&
			(attrs & GenericParameterAttributes.NotNullableValueTypeConstraint) == 0)
		{
			constraints.Add("new()");
		}

		if (constraints.Any())
		{
			return "where " + type.Name + " : " + string.Join(", ", constraints);
		}

		return null;
	}

	private string GetClientNamespace(Type type)
	{
		return type.Namespace;
	}

	private IEnumerable<Type> GetTypes(Assembly asm)
	{
		try
		{
			return asm.GetTypes();
		}
		catch (Exception ex)
		{
			System.Diagnostics.Trace.WriteLine("T4", "Cannot load types because of exception: {0}" + ex.ToString());
		}

		return Enumerable.Empty<Type>();
	}

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class ZyanAsyncSamplePreprocessorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
