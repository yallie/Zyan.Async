// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Zyan.Async
{
    using System;
    using System.IO;
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Threading.Tasks;
    using System.Reflection;
    using System.Collections.Generic;
    using Microsoft.VisualStudio.TextTemplating;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "D:\Externals\Zyan.Async\Zyan.Async\ZyanAsyncSamplePreprocessor.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class ZyanAsyncSamplePreprocessor : ZyanAsyncSamplePreprocessorBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            
            #line 1 "D:\Externals\Zyan.Async\Zyan.Async\ZyanAsyncSamplePreprocessor.tt"

/// --------------------------------------
/// Add your assemblies here: 
/// --------------------------------------

Assemblies = new[]
{
	@"..\Zyan.Async.TestInterfaces\bin\Debug\Zyan.Async.TestInterfaces.dll",
};


            
            #line default
            #line hidden
            
            #line 1 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

// Extension method generator.
// https://github.com/yallie/Zyan.Async
//
// Inspects loaded assemblies, extracts all types mathing the given filter.
// Creates static class with asynchronous extension methods for every inspected type.
//
// Template parameters:
// 
// * AssemblyIgnoreList — regular expression of assemblies to ignore, e.g: @"^(mscorlib|System)$"
// * TypeIgnoreList — regular expression of types to ignore, e.g: @"^(Microsoft\.VisualStudio\.TextTemplating)"
// * MethodIgnoreList — regular expression of methods to ignore, e.g.: @"^(get_|set_|add_|remove_)"
// * TypeFilter — predicate used to filter out the unneeded types, e.g.: t => !Regex.IsMatch(t.Name, TypeIgnoreList)

            
            #line default
            #line hidden
            
            #line 1 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.MultipleOutputHelper.ttinclude"

// MultipleOutputHelper by Damien Guard.

            
            #line default
            #line hidden
            
            #line 27 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

	// get loaded assemblies containing interfaces
	var asms =
		from asm in Assemblies.Select(GetAssemblyName).Select(File.ReadAllBytes).Select(Assembly.Load)
		where !Regex.IsMatch(asm.GetName().Name, AssemblyIgnoreList) && GetTypes(asm).Any(TypeFilter)
		orderby asm.FullName
		select asm;

	// create Manager to output multiple files
	var manager = Manager.Create(Host, GenerationEnvironment);

	// process every assembly containing interfaces
	foreach (var asm in asms)
	{
		
            
            #line default
            #line hidden
            this.Write("Processing assembly: ");
            
            #line 41 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(asm.FullName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 42 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

		// emit extension class for each interface
		foreach (var type in GetTypes(asm).Where(TypeFilter))
		{
			
            
            #line default
            #line hidden
            this.Write("\tProcessing type: ");
            
            #line 46 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 47 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

			// prepare output filename
			var fileName = GetClientNamespace(type) + "." + GetNonGenericTypeName(type.Name) + "AsyncExtensions.cs";
			fileName = Path.ChangeExtension(Host.TemplateFile, fileName);
			manager.StartNewFile(fileName);


            
            #line default
            #line hidden
            this.Write("// Assembly name: ");
            
            #line 53 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(asm.FullName));
            
            #line default
            #line hidden
            this.Write("\r\nnamespace ");
            
            #line 54 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetClientNamespace(type)));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n\t// Rewriting XML comments is not supported\r\n\t#pragma warning disable 1591\r\n" +
                    "\r\n\t/// <summary>\r\n\t/// Asynchronous extension methods for the <see cref=\"");
            
            #line 60 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(type.FullName));
            
            #line default
            #line hidden
            this.Write("\" /> interface.\r\n\t/// </summary>\r\n\tpublic static class ");
            
            #line 62 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetNonGenericTypeName(type.Name)));
            
            #line default
            #line hidden
            this.Write("AsyncExtensions\r\n\t{\r\n");
            
            #line 64 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

			// create asynchronous extension method for every synchronous method
			foreach (var method in type.GetMethods().Where(m => !Regex.IsMatch(m.Name, methodIgnoreList)))
			{
				var methodParameters = method.GetParameters();
				if (methodParameters.Any(p => p.IsOut || p.IsRetval || p.ParameterType.IsPointer || p.ParameterType.IsByRef))
				{
					// methods with ref/out parameters cannot be async
					continue;
				}

				var returnType = method.ReturnType;
				if (returnType == typeof(void) || returnType == typeof(Task))
				{
					returnType = typeof(Task);
				}
				else
				{
					returnType = typeof(Task<>).MakeGenericType(returnType);
				}

				var genericParameters = string.Empty;
				var genericConstraints = Enumerable.Empty<string>();
				var genericArguments = Enumerable.Empty<Type>();
				var methodGenericParameters = string.Empty;
				if (method.DeclaringType.IsGenericType)
				{
					genericArguments = method.DeclaringType.GetGenericTypeDefinition().GetGenericArguments().AsEnumerable();
				}

				if (method.IsGenericMethod)
				{
					genericArguments = genericArguments.Concat(method.GetGenericArguments());
					methodGenericParameters = "<" + string.Join(", ", method.GetGenericArguments().Select(t => GetTypeName(t))) + ">";;
				}

				if (genericArguments.Any())
				{
					genericParameters = "<" + string.Join(", ", genericArguments.Select(t => GetTypeName(t))) + ">";
					genericConstraints = genericArguments.Select(t => GetTypeConstraints(t)).Where(c => c != null);
				}

				var parameters = string.Join(", ", method.GetParameters().Select(p =>
				{
					var defaultValue = string.Empty;
					if (p.HasDefaultValue)
					{
						defaultValue = " = " + GetValueLiteral(p.DefaultValue, p.ParameterType);
					}

					return (Attribute.IsDefined(p, typeof(ParamArrayAttribute)) ? "params " : string.Empty) +
						GetTypeName(p.ParameterType) + " " + p.Name + defaultValue;
				}));

				if (!string.IsNullOrEmpty(parameters))
				{
					parameters = ", " + parameters; 
				}
				
				var actualParameters = string.Join(", ", method.GetParameters().Select(p => p.Name));


            
            #line default
            #line hidden
            this.Write("\t\t// ");
            
            #line 125 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(method));
            
            #line default
            #line hidden
            this.Write("\r\n\t\tpublic static ");
            
            #line 126 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeName(returnType)));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 126 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            this.Write("Async");
            
            #line 126 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(genericParameters));
            
            #line default
            #line hidden
            this.Write("(this ");
            
            #line 126 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeName(type)));
            
            #line default
            #line hidden
            this.Write(" self");
            
            #line 126 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(parameters));
            
            #line default
            #line hidden
            this.Write(")\r\n");
            
            #line 127 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
 
			// emit generic constraints
			foreach (var constraint in genericConstraints)
			{

            
            #line default
            #line hidden
            this.Write("\t\t\t");
            
            #line 131 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(constraint));
            
            #line default
            #line hidden
            this.Write("\r\n");
            
            #line 132 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

			}

            
            #line default
            #line hidden
            this.Write("\t\t{\r\n\t\t\treturn System.Threading.Tasks.Task.Run(() => self.");
            
            #line 136 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(method.Name));
            
            #line default
            #line hidden
            
            #line 136 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(methodGenericParameters));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 136 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(actualParameters));
            
            #line default
            #line hidden
            this.Write("));\r\n\t\t}\r\n\r\n");
            
            #line 139 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

			}

            
            #line default
            #line hidden
            this.Write("\t}\r\n} // ");
            
            #line 142 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetClientNamespace(type)));
            
            #line default
            #line hidden
            this.Write(".");
            
            #line 142 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
            this.Write(this.ToStringHelper.ToStringWithCulture(GetNonGenericTypeName(type.Name)));
            
            #line default
            #line hidden
            this.Write("AsyncExtensions\r\n\r\n");
            
            #line 144 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"
			// close the current file
			manager.EndBlock();
		}
	}

// Generate output, split file into sections
manager.Process(true);


            
            #line default
            #line hidden
            return this.GenerationEnvironment.ToString();
        }
        private global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost hostValue;
        /// <summary>
        /// The current host for the text templating engine
        /// </summary>
        public virtual global::Microsoft.VisualStudio.TextTemplating.ITextTemplatingEngineHost Host
        {
            get
            {
                return this.hostValue;
            }
            set
            {
                this.hostValue = value;
            }
        }
        
        #line 153 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.ExtensionMethods.ttinclude"

	// Template parameters

	private IEnumerable<string> assemblies = new string[0];
	private string assemblyIgnoreList = @"^(mscorlib|Microsoft|System|WindowsBase|EnvDTE|Accessibility|UltimaLib|Zyan.Communication)";
	private string typeIgnoreList = @"^(Microsoft\.VisualStudio\.TextTemplating)";
	private string methodIgnoreList = @"^(get_|set_|add_|remove_)";
	private Func<Type, bool> typeFilter;

	public IEnumerable<string> Assemblies
	{
		get { return assemblies; }
		set { assemblies = value ?? new string[0]; }
	}

	public string AssemblyIgnoreList
	{
		get { return assemblyIgnoreList; }
		set { assemblyIgnoreList = value; }
	}

	public string TypeIgnoreList
	{
		get { return typeIgnoreList; }
		set { typeIgnoreList = value; }
	}

	public string MethodIgnoreList
	{
		get { return methodIgnoreList; }
		set { methodIgnoreList = value; }
	}

	public Func<Type, bool> TypeFilter
	{
		get
		{
			if (typeFilter == null)
			{
				typeFilter = t => t.IsInterface && 
					!Regex.IsMatch(t.Name, TypeIgnoreList) &&
					!System.Attribute.IsDefined(t, typeof(System.Runtime.CompilerServices.CompilerGeneratedAttribute)) &&
					t.GetMethods().Any(m => !Regex.IsMatch(m.Name, MethodIgnoreList));
			}

			return typeFilter;
		}
		set { typeFilter = value; }
	}

	// Utility methods

	internal string GetTypeName(Type type)
	{
		if (type == null)
		{
			return string.Empty;
		}

		if (type.IsGenericType)
		{
			var typeArguments = string.Join(", ", type.GetGenericArguments().Select(x => GetTypeName(x)));
			return Regex.Replace(type.GetGenericTypeDefinition().FullName, @"`.+$", "") + "<" + typeArguments + ">";
		}

		if (type.IsArray)
		{
			var rank = new string(',', type.GetArrayRank() - 1);
			return GetTypeName(type.GetElementType()) + "[" + rank + "]";
		}

		return (type.FullName ?? type.Name).Replace("+", ".");
	}

	internal string GetAssemblyName(string asmName)
	{
		if (!asmName.StartsWith(".") && !asmName.StartsWith(@"\"))
		{
			asmName = @"..\" + asmName;
		}

		if (!File.Exists(asmName))
		{
			asmName = Host.ResolvePath(asmName);
		}

		return asmName;
	}

	internal string GetNonGenericTypeName(string typeName)
	{
		return Regex.Replace(typeName, @"`.+$", "");
	}

	internal string GetTypeConstraints(Type type)
	{
		var constraints = type
			.GetGenericParameterConstraints()
			.Where(t => t != typeof(ValueType))
			.Select(t => GetTypeName(t))
			.ToList();

		var attrs = type.GenericParameterAttributes;
		if ((attrs & GenericParameterAttributes.ReferenceTypeConstraint) != 0)
		{
			constraints.Insert(0, "class");
		}

		if ((attrs & GenericParameterAttributes.NotNullableValueTypeConstraint) != 0)
		{
			constraints.Insert(0, "struct");
		}

		if ((attrs & GenericParameterAttributes.DefaultConstructorConstraint) != 0 &&
			(attrs & GenericParameterAttributes.NotNullableValueTypeConstraint) == 0)
		{
			constraints.Add("new()");
		}

		if (constraints.Any())
		{
			return "where " + type.Name + " : " + string.Join(", ", constraints);
		}

		return null;
	}

	internal string GetValueLiteral(object value, Type type = null)
	{
		if (value == null)
		{
			if (type != null && type.IsValueType)
			{
				return string.Format("default({0})", GetTypeName(type));
			}

			return "null";
		}

		if (value is bool)
		{
			return value.ToString().ToLower();
		}

		if (value is Enum)
		{
			return string.Format("{0}.{1}", GetTypeName(value.GetType()), value);
		}

		var invariantCulture = System.Globalization.CultureInfo.InvariantCulture;
		if (value is decimal)
		{
			return string.Format(invariantCulture, "{0}M", value);
		}

		if (value is float)
		{
			return string.Format(invariantCulture, "{0}F", value);
		}

		if (value is double)
		{
			return string.Format(invariantCulture, "{0}D", value);
		}

		if (value is long)
		{
			return value.ToString() + "L";
		}

		if (value is ulong)
		{
			return value.ToString() + "UL";
		}

		if (value is short)
		{
			return value.ToString() + "S";
		}

		if (value is ushort)
		{
			return value.ToString() + "US";
		}

		if (value is uint)
		{
			return value.ToString() + "U";
		}

		if (value is string)
		{
			return string.Format(@"@""{0}""", (value as string).Replace("\"", "\"\""));
		}

		return value.ToString();
	}

	private string GetClientNamespace(Type type)
	{
		return type.Namespace;
	}

	private IEnumerable<Type> GetTypes(Assembly asm)
	{
		try
		{
			return asm.GetTypes();
		}
		catch (Exception ex)
		{
			System.Diagnostics.Trace.WriteLine("T4", "Cannot load types because of exception: {0}" + ex.ToString());
		}

		return Enumerable.Empty<Type>();
	}

        
        #line default
        #line hidden
        
        #line 13 "D:\Externals\Zyan.Async\Zyan.Async\Zyan.Async.MultipleOutputHelper.ttinclude"

// https://raw.github.com/damieng/DamienGKit
// http://damieng.com/blog/2009/11/06/multiple-outputs-from-t4-made-easy-revisited

// Manager class records the various blocks so it can split them up
class Manager {
    private class Block {
        public String Name;
        public int Start, Length;
        public bool IncludeInDefault;
    }

    private Block currentBlock;
    private readonly List<Block> files = new List<Block>();
    private readonly Block footer = new Block();
    private readonly Block header = new Block();
    private readonly ITextTemplatingEngineHost host;
    private readonly StringBuilder template;
    protected readonly List<String> generatedFileNames = new List<String>();

    public static Manager Create(ITextTemplatingEngineHost host, StringBuilder template) {
        return (host is IServiceProvider) ? new VSManager(host, template) : new Manager(host, template);
    }

    public void StartNewFile(String name) {
        if (name == null)
            throw new ArgumentNullException("name");
        CurrentBlock = new Block { Name = name };
    }

    public void StartFooter(bool includeInDefault = true) {
        CurrentBlock = footer;
        footer.IncludeInDefault = includeInDefault;
    }

    public void StartHeader(bool includeInDefault = true) {
        CurrentBlock = header;
        header.IncludeInDefault = includeInDefault;
    }

    public void EndBlock() {
        if (CurrentBlock == null)
            return;
        CurrentBlock.Length = template.Length - CurrentBlock.Start;
        if (CurrentBlock != header && CurrentBlock != footer)
            files.Add(CurrentBlock);
        currentBlock = null;
    }

    public virtual void Process(bool split, bool sync = true) {
        if (split) {
            EndBlock();
            String headerText = template.ToString(header.Start, header.Length);
            String footerText = template.ToString(footer.Start, footer.Length);
            String outputPath = Path.GetDirectoryName(host.TemplateFile);
            files.Reverse();
            if (!footer.IncludeInDefault)
                template.Remove(footer.Start, footer.Length);
            foreach(Block block in files) {
                String fileName = Path.Combine(outputPath, block.Name);
                String content = headerText + template.ToString(block.Start, block.Length) + footerText;
                generatedFileNames.Add(fileName);
                CreateFile(fileName, content);
                template.Remove(block.Start, block.Length);
            }
            if (!header.IncludeInDefault)
                template.Remove(header.Start, header.Length);
        }
    }

    protected virtual void CreateFile(String fileName, String content) {
        if (IsFileContentDifferent(fileName, content))
            File.WriteAllText(fileName, content);
    }

    public virtual String GetCustomToolNamespace(String fileName) {
        return null;
    }

    public virtual String DefaultProjectNamespace {
        get { return null; }
    }

    protected bool IsFileContentDifferent(String fileName, String newContent) {
        return !(File.Exists(fileName) && File.ReadAllText(fileName) == newContent);
    }

    private Manager(ITextTemplatingEngineHost host, StringBuilder template) {
        this.host = host;
        this.template = template;
    }

    private Block CurrentBlock {
        get { return currentBlock; }
        set {
            if (CurrentBlock != null)
                EndBlock();
            if (value != null)
                value.Start = template.Length;
            currentBlock = value;
        }
    }

    private class VSManager: Manager {
        private readonly EnvDTE.ProjectItem templateProjectItem;
        private readonly EnvDTE.DTE dte;
        private readonly Action<String> checkOutAction;
        private readonly Action<List<String>> projectSyncAction;

        public override String DefaultProjectNamespace {
            get {
                return templateProjectItem.ContainingProject.Properties.Item("DefaultNamespace").Value.ToString();
            }
        }

        public override String GetCustomToolNamespace(string fileName) {
            return dte.Solution.FindProjectItem(fileName).Properties.Item("CustomToolNamespace").Value.ToString();
        }

        public override void Process(bool split, bool sync) {
            if (templateProjectItem.ProjectItems == null)
                return;
            base.Process(split, sync);
            if (sync)
                projectSyncAction.EndInvoke(projectSyncAction.BeginInvoke(generatedFileNames, null, null));
        }

        protected override void CreateFile(String fileName, String content) {
            if (IsFileContentDifferent(fileName, content)) {
                CheckoutFileIfRequired(fileName);
                File.WriteAllText(fileName, content);
            }
        }

        internal VSManager(ITextTemplatingEngineHost host, StringBuilder template)
            : base(host, template) {
            var hostServiceProvider = (IServiceProvider)host;
            if (hostServiceProvider == null)
                throw new ArgumentNullException("Could not obtain IServiceProvider");
            dte = (EnvDTE.DTE) hostServiceProvider.GetService(typeof(EnvDTE.DTE));
            if (dte == null)
                throw new ArgumentNullException("Could not obtain DTE from host");
            templateProjectItem = dte.Solution.FindProjectItem(host.TemplateFile);
            checkOutAction = fileName => dte.SourceControl.CheckOutItem(fileName);
            projectSyncAction = keepFileNames => ProjectSync(templateProjectItem, keepFileNames);
        }

        private static void ProjectSync(EnvDTE.ProjectItem templateProjectItem, List<String> keepFileNames) {
            var keepFileNameSet = new HashSet<String>(keepFileNames);
            var projectFiles = new Dictionary<String, EnvDTE.ProjectItem>();
            var originalFilePrefix = Path.GetFileNameWithoutExtension(templateProjectItem.FileNames[0]) + ".";
            foreach (EnvDTE.ProjectItem projectItem in templateProjectItem.ProjectItems)
                projectFiles.Add(projectItem.FileNames[0], projectItem);

            // Remove unused items from the project
            foreach (var pair in projectFiles)
                if (!keepFileNames.Contains(pair.Key) && !(Path.GetFileNameWithoutExtension(pair.Key) + ".").StartsWith(originalFilePrefix))
                    pair.Value.Delete();

            // Add missing files to the project
            foreach(String fileName in keepFileNameSet)
                if (!projectFiles.ContainsKey(fileName))
                    templateProjectItem.ProjectItems.AddFromFile(fileName);
        }

        private void CheckoutFileIfRequired(String fileName) {
            var sc = dte.SourceControl;
            if (sc != null && sc.IsItemUnderSCC(fileName) && !sc.IsItemCheckedOut(fileName))
                checkOutAction.EndInvoke(checkOutAction.BeginInvoke(fileName, null, null));
        }
    }
} 
        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class ZyanAsyncSamplePreprocessorBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
